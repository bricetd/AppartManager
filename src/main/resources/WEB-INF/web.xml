<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" version="2.5"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">


	<!-- General description of your web application -->

	<display-name>Appartements</display-name>
	<description>
		Application de gestion d'appartements en location
	</description>


	<!-- Context initialization parameters that define shared String constants 
		used within your application, which can be customized by the system administrator 
		who is installing your application. The values actually assigned to these 
		parameters can be retrieved in a servlet or JSP page by calling: String value 
		= getServletContext().getInitParameter("name"); where "name" matches the 
		<param-name> element of one of these initialization parameters. You can define 
		any number of context initialization parameters, including zero. -->

	<context-param>
		<param-name>webmaster</param-name>
		<param-value>myaddress@mycompany.com</param-value>
	</context-param>


	<!-- Servlet definitions for the servlets that make up your web application, 
		including initialization parameters. With Tomcat, you can also send requests 
		to servlets not listed here with a request like this: http://localhost:8080/{context-path}/servlet/{classname} 
		but this usage is not guaranteed to be portable. It also makes relative references 
		to images and other resources required by your servlet more complicated, 
		so defining all of your servlets (and defining a mapping to them with a servlet-mapping 
		element) is recommended. Servlet initialization parameters can be retrieved 
		in a servlet or JSP page by calling: String value = getServletConfig().getInitParameter("name"); 
		where "name" matches the <param-name> element of one of these initialization 
		parameters. You can define any number of servlets, including zero. -->

	<servlet>
		<servlet-name>jersey-servlet-handler</servlet-name>
		<servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
		<!-- <init-param> <param-name>javax.ws.rs.Application</param-name> <param-value>com.mby.batterymanagerserver.network</param-value> 
			</init-param> -->
		<init-param>
			<param-name>jersey.config.server.provider.packages</param-name>
			<param-value>
				io.swagger.jaxrs.listing,
				com.mby.appartmanager.rest
			</param-value>
		</init-param>
		<init-param>
			<param-name>jersey.config.server.provider.scanning.recursive</param-name>
			<param-value>false</param-value>
		</init-param>
		<init-param>
			<param-name>jersey.config.server.tracing</param-name>
			<param-value>ALL</param-value>
		</init-param>
		<init-param>
			<param-name>com.sun.jersey.spi.container.ContainerRequestFilters</param-name>
			<param-value>com.sun.jersey.api.container.filter.LoggingFilter</param-value>
		</init-param>

		<init-param>
			<param-name>com.sun.jersey.api.json.POJOMappingFeature</param-name>
			<param-value>true</param-value>
		</init-param>
		<!-- <init-param> -->
		<!-- <param-name>com.sun.jersey.spi.container.ContainerResponseFilters</param-name> -->
		<!-- <param-value>com.sun.jersey.api.container.filter.LoggingFilter</param-value> -->
		<!-- </init-param> -->
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet>
		<servlet-name>Jersey2Config</servlet-name>
		<servlet-class>io.swagger.jersey.config.JerseyJaxrsConfig</servlet-class>
		<init-param>
			<param-name>api.version</param-name>
			<param-value>v1</param-value>
		</init-param>
		<init-param>
			<param-name>swagger.api.basepath</param-name>
			<param-value>http://appartmgr:8080/appartmanager/</param-value>
		</init-param>
		<load-on-startup>2</load-on-startup>
	</servlet>

	<filter>
		<filter-name>corsfilter</filter-name>
		<filter-class>org.apache.catalina.filters.CorsFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>corsfilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- Define mappings that are used by the servlet container to translate 
		a particular request URI (context-relative) to a particular servlet. The 
		examples below correspond to the servlet descriptions above. Thus, a request 
		URI like: http://localhost:8080/{contextpath}/graph will be mapped to the 
		"graph" servlet, while a request like: http://localhost:8080/{contextpath}/saveCustomer.do 
		will be mapped to the "controller" servlet. You may define any number of 
		servlet mappings, including zero. It is also legal to define more than one 
		mapping for the same servlet, if you wish to. -->

	<servlet-mapping>
		<servlet-name>jersey-servlet-handler</servlet-name>
		<url-pattern>/*</url-pattern>
	</servlet-mapping>

	<!-- Define the default session timeout for your application, in minutes. 
		From a servlet or JSP page, you can modify the timeout for a particular session 
		dynamically by using HttpSession.getMaxInactiveInterval(). -->

	<session-config>
		<session-timeout>30</session-timeout>    <!-- 30 minutes -->
	</session-config>


</web-app>
